# Generated by Django 3.2.9 on 2022-03-14 09:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentator', models.CharField(max_length=100)),
                ('comment_detail', models.TextField(max_length=2000)),
                ('comment_time_stamp', models.DateTimeField(blank=True, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expert', models.CharField(max_length=100)),
                ('exp_comment', models.CharField(max_length=500)),
                ('update_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='ExpertsGeographicDiv',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.expert')),
            ],
        ),
        migrations.CreateModel(
            name='Kingdom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kingdom_name', models.CharField(max_length=20)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('pub_id_prefix', models.CharField(max_length=3, unique=True)),
                ('publication_id', models.IntegerField(primary_key=True, serialize=False)),
                ('reference_author', models.CharField(blank=True, max_length=100, null=True)),
                ('title', models.CharField(max_length=255)),
                ('publication_name', models.CharField(blank=True, max_length=255, null=True)),
                ('listed_pub_date', models.DateTimeField(blank=True, null=True)),
                ('actual_pub_date', models.DateTimeField(blank=True, null=True)),
                ('publisher', models.CharField(blank=True, max_length=80, null=True)),
                ('pub_place', models.CharField(blank=True, max_length=40, null=True)),
                ('isbn', models.CharField(blank=True, max_length=16, null=True)),
                ('issn', models.CharField(blank=True, max_length=40, null=True)),
                ('pages', models.CharField(blank=True, max_length=15, null=True)),
                ('pub_comment', models.CharField(blank=True, max_length=500, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('pub_id_prefix', 'publication_id')},
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('authors', models.TextField(blank=True, help_text='Comma-delimited names with space-separated initials first (no ANDs). e.g. "A. N. Other, B.-C. Person Jr., Ch. Someone-Someone, N. M. L. Haw Haw"')),
                ('title', models.TextField(blank=True, help_text='Best-effort UTF-8 encoded plaintext version of title. No HTML tags, markdown or LaTeX.')),
                ('title_html', models.TextField(blank=True, help_text="Valid HTML version of title. Don't wrap with &lt;p&gt; or other tags.")),
                ('title_latex', models.TextField(blank=True, help_text="LaTeX version of title. Don't escape backslashes (\\) but do use valid LaTeX for accented and similar characers.")),
                ('journal', models.CharField(blank=True, max_length=500)),
                ('volume', models.CharField(blank=True, max_length=10)),
                ('page_start', models.CharField(blank=True, max_length=10)),
                ('page_end', models.CharField(blank=True, max_length=10)),
                ('article_number', models.CharField(blank=True, max_length=16)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('note_html', models.TextField(blank=True)),
                ('note_latex', models.TextField(blank=True)),
                ('doi', models.CharField(blank=True, max_length=100)),
                ('bibcode', models.CharField(blank=True, max_length=19)),
                ('url', models.URLField(blank=True, help_text='If not provided, this will be automatically constructed as https://dx.doi.org/&lt;DOI&gt; if possible.')),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('ris', models.TextField(blank=True, null=True)),
                ('citeproc_json', models.TextField(blank=True, null=True)),
                ('visible', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='TaxonAuthorLkp',
            fields=[
                ('taxon_author_id', models.IntegerField(primary_key=True, serialize=False)),
                ('taxon_author', models.CharField(blank=True, max_length=100, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('short_author', models.CharField(blank=True, max_length=100, null=True)),
                ('kingdom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.kingdom')),
            ],
            options={
                'unique_together': {('taxon_author_id', 'kingdom_id')},
            },
        ),
        migrations.CreateModel(
            name='TaxonomicUnit',
            fields=[
                ('taxon_id', models.AutoField(primary_key=True, serialize=False)),
                ('unit_ind1', models.CharField(blank=True, max_length=1, null=True)),
                ('unit_name1', models.CharField(max_length=35)),
                ('unit_ind2', models.CharField(blank=True, max_length=1, null=True)),
                ('unit_name2', models.CharField(blank=True, max_length=35, null=True)),
                ('unit_ind3', models.CharField(blank=True, max_length=7, null=True)),
                ('unit_name3', models.CharField(blank=True, max_length=35, null=True)),
                ('unit_ind4', models.CharField(blank=True, max_length=7, null=True)),
                ('unit_name4', models.CharField(blank=True, max_length=35, null=True)),
                ('unnamed_taxon_ind', models.CharField(blank=True, max_length=1, null=True)),
                ('name_usage', models.CharField(blank=True, max_length=12, null=True)),
                ('unaccept_reason', models.CharField(blank=True, max_length=50, null=True)),
                ('credibility_rtng', models.CharField(blank=True, max_length=40, null=True)),
                ('completeness_rtng', models.CharField(blank=True, max_length=10, null=True)),
                ('currency_rating', models.CharField(blank=True, max_length=7, null=True)),
                ('phylo_sort_seq', models.IntegerField(blank=True, null=True)),
                ('initial_time_stamp', models.DateTimeField(blank=True, null=True)),
                ('parent_id', models.IntegerField()),
                ('hybrid_author_id', models.IntegerField(blank=True, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('uncertain_prnt_ind', models.CharField(blank=True, max_length=3, null=True)),
                ('n_usage', models.CharField(blank=True, max_length=12, null=True)),
                ('complete_name', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TuCommentLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.comment')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.taxonomicunit')),
            ],
        ),
        migrations.CreateModel(
            name='TaxonUnitType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_id', models.IntegerField(blank=True, null=True)),
                ('rank_name', models.CharField(max_length=15)),
                ('dir_parent_rank_id', models.IntegerField(blank=True, null=True)),
                ('req_parent_rank_id', models.IntegerField(blank=True, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('kingdom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.kingdom')),
            ],
            options={
                'unique_together': {('kingdom', 'rank_id')},
            },
        ),
        migrations.AddField(
            model_name='taxonomicunit',
            name='comments',
            field=models.ManyToManyField(through='front.TuCommentLink', to='front.Comment'),
        ),
        migrations.AddField(
            model_name='taxonomicunit',
            name='kingdom',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.kingdom'),
        ),
        migrations.AddField(
            model_name='taxonomicunit',
            name='rank',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='front.taxonunittype'),
        ),
        migrations.AddField(
            model_name='taxonomicunit',
            name='taxon_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='front.taxonauthorlkp'),
        ),
        migrations.CreateModel(
            name='SynonymLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonym_id', models.IntegerField()),
                ('update_date', models.DateTimeField()),
                ('taxon_id_accepted', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.taxonomicunit')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalReference',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('authors', models.TextField(blank=True, help_text='Comma-delimited names with space-separated initials first (no ANDs). e.g. "A. N. Other, B.-C. Person Jr., Ch. Someone-Someone, N. M. L. Haw Haw"')),
                ('title', models.TextField(blank=True, help_text='Best-effort UTF-8 encoded plaintext version of title. No HTML tags, markdown or LaTeX.')),
                ('title_html', models.TextField(blank=True, help_text="Valid HTML version of title. Don't wrap with &lt;p&gt; or other tags.")),
                ('title_latex', models.TextField(blank=True, help_text="LaTeX version of title. Don't escape backslashes (\\) but do use valid LaTeX for accented and similar characers.")),
                ('journal', models.CharField(blank=True, max_length=500)),
                ('volume', models.CharField(blank=True, max_length=10)),
                ('page_start', models.CharField(blank=True, max_length=10)),
                ('page_end', models.CharField(blank=True, max_length=10)),
                ('article_number', models.CharField(blank=True, max_length=16)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('note_html', models.TextField(blank=True)),
                ('note_latex', models.TextField(blank=True)),
                ('doi', models.CharField(blank=True, max_length=100)),
                ('bibcode', models.CharField(blank=True, max_length=19)),
                ('url', models.URLField(blank=True, help_text='If not provided, this will be automatically constructed as https://dx.doi.org/&lt;DOI&gt; if possible.')),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('ris', models.TextField(blank=True, null=True)),
                ('citeproc_json', models.TextField(blank=True, null=True)),
                ('visible', models.IntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical reference',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Hierarchy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hierarchy_string', models.CharField(blank=True, max_length=128, null=True)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('childrencount', models.IntegerField(blank=True, null=True)),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.taxonomicunit')),
            ],
        ),
        migrations.CreateModel(
            name='GeographicDiv',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geographic_value', models.CharField(blank=True, max_length=45, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('experts', models.ManyToManyField(through='front.ExpertsGeographicDiv', to='front.Expert')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.taxonomicunit', unique=True)),
            ],
            options={
                'unique_together': {('taxon', 'geographic_value')},
            },
        ),
        migrations.AddField(
            model_name='expertsgeographicdiv',
            name='geographic',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='front.geographicdiv'),
        ),
        migrations.CreateModel(
            name='ReferenceLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_id_prefix', models.CharField(choices=[('EXP', 'Expert'), ('PUB', 'Publication'), ('SRC', 'Other source')], max_length=3)),
                ('original_desc_ind', models.CharField(max_length=1)),
                ('init_itis_desc_ind', models.CharField(max_length=1)),
                ('change_track_id', models.IntegerField()),
                ('vernacular_name', models.CharField(max_length=80)),
                ('update_date', models.DateTimeField()),
                ('documentation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.publication')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='front.taxonomicunit')),
            ],
            options={
                'unique_together': {('taxon', 'doc_id_prefix', 'documentation')},
            },
        ),
    ]
